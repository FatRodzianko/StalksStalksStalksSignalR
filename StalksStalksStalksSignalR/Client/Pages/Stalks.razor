@page "/stalks"

@using Microsoft.AspNetCore.SignalR.Client
@inject NavigationManager navigationManager
@implements IDisposable
@using StalksStalksStalksSignalR.Shared
@using System.Text.Json;
@using System.Web.Script.Serialization;
@using Newtonsoft.Json;

<h3>Stalks</h3>

@if (!gameStarted)
{
    <p>Please enter your name!</p>
    <p></p>
    @if (currentPlayer.Name == "")
    {
        <EditForm Model=@currentPlayer OnSubmit=@CreatePlayerName>
            <InputText @bind-Value="username" />
            <input type="submit" value="Create User Name" class="btn btn-primary" />
        </EditForm>
    }
    @if (currentPlayer.Name != "")
    {
        <button class="btn btn-primary" @onclick="ReadyUp">Click here if you are ready to play!</button>
    }
    <p>List of connected users</p>
    <button class="btn btn-primary" @onclick="GetUsers">Show list of users</button>
    @if (playerList.Count > 0)
    {
        <table class="table">
            <tr>
                <th>Player Name</th>
                <th>Player Connection ID</th>
                <th>ready?</th>
            </tr>
            @foreach (player player in playerList)
            {
                <tr>
                    <td>@player.Name</td>
                    <td>@player.ConnectionId</td>
                    <td>@player.Ready.ToString()</td>
                </tr>
            }
        </table>
    }

    @if (allPlayersReady)
    {
        <button class="btn btn-primary" @onclick="Send">Start the mother loving game!!!</button>
    }
}
else
{
    <!--
    <p>List of connected users</p>
    <button class="btn btn-primary" @onclick="GetUsers">Get Users</button>
    @foreach (player player in playerList)
    {
        <p>@player.Name : @player.ConnectionId : @player.Ready.ToString()</p>
    }

    <p> Your username is: @username</p>
    <p> Your connection id is: @playerConnectionId</p>
    -->
    @if (year == 0)
    {
        <audio autoplay loop><source src="/opening-theme.mp3" /></audio>
    }
    @if (bullBear == "BULL BULL BULL" && year > 0)
    {
        <audio autoplay><source src="/bull1.mp3" /></audio>
        <audio autoplay><source src="/bull2.mp3" /></audio>
    }
    @if (bullBear == "bear..." && year > 0)
    {
        <audio autoplay><source src="/bear1.mp3" /></audio>
        <audio autoplay><source src="/bear2.mp3" /></audio>
    }
    <div style="float:left;">
        @if (!CanIGetAYeehaw)
        {
            <button class="btn btn-primary" @onclick=@RequestYeehaw>Can I get a yeehaw?</button>
        }
        @if (CanIGetAYeehaw)
        {
            <button class="btn btn-primary" @onclick=@GiveYeehaw>Give @requestingYeehaw a Yeehaw!</button>
            <p><b>@requestingYeehaw</b> is requesting a Yeehaw!</p>
        }
        @if (YeehawReceived)
        {
            <p><b>@givingYeehaw</b> sent a Yeehaw!</p>
            <audio autoplay><source src="/yeehaw.mp3" /></audio>
        }
    </div>
    if (endGame)
    {
        <h1>The winner is: @winningPlayer.Name</h1>
        @if (username == winningPlayer.Name)
        {
            <p>
                <b>Congratulations, that's you!!!!</b>
                You're the best at picking stalks! What a useful skill for society!!!
            </p>

        }
        @if (username != winningPlayer.Name)
        {
            <b>You're terrible at picking stalks! You're fired and your father will never be proud of you!!!</b>
        }
    }
    else
    {
<div style="clear:both">
    @if (!currentPlayer.HasLoan)
    {
        <button class="btn btn-primary" @onclick="StartNewYear">Start a new year</button> <p>
            Who needs to press 'Start a new year!!!':
            @foreach (player player in playerList)
            {
                @if (player.StartNewYear == false && player.Ready != false)
                {
                    <b> || @player.Name || </b>
                }
            }
        </p>
    }
    else if (currentPlayer.HasLoan && playerLoan.LoanBalance == 0)
    {
        <button class="btn btn-primary" @onclick="StartNewYear">Start a new year</button> <p>
            Who needs to press 'Start a new year!!!':
            @foreach (player player in playerList)
            {
                @if (player.StartNewYear == false && player.Ready != false)
                {
                    <b> || @player.Name || </b>
                }
            }
        </p>
    }
    else if (currentPlayer.HasLoan && playerLoan.YearsRemaining == 11)
    {
        <b>You have a loan. You will need to start paying it off next year.</b><br />
        <button class="btn btn-primary" @onclick="StartNewYear">Start a new year</button> <p>
            Who needs to press 'Start a new year!!!':
            @foreach (player player in playerList)
            {
                @if (player.StartNewYear == false && player.Ready != false)
                {
                    <b> || @player.Name || </b>
                }
            }
        </p>
    }
    else if (currentPlayer.HasLoan && playerLoan.YearsRemaining < 11 && !playerLoan.PaidThisYear)
    {
        @if (!playerDontPayLoan || !playerDontPayLoadConfirmation)
        {
            <b>You're loan balance is: @playerLoan.LoanBalance</b><br />
            <b>You're minimum loan payment is: @playerLoan.MinPayment</b><br />
            <b>Years remaining on the loan: @playerLoan.YearsRemaining</b><br />
            @if (playerLoan.MissedPayments == 1)
            {
                <b>You've missed one payment.</b>
            }
            else if (playerLoan.MissedPayments == 2)
            {
                <b>You've missed two payments. One more missed payment and the bank will sieze all your assets.</b>
            }
            <EditForm Model=@loanPurchaseOrPayment OnSubmit=@PayLoan>
                <InputText type="hidden" @bind-Value="loanPurchaseOrPayment.PurchaseOrPayment">Payment</InputText>
                <InputNumber @bind-Value="loanPurchaseOrPayment.DollarAmount">0</InputNumber>
                <input type="submit" value="Submit" class="btn btn-primary" />
            </EditForm>
            @if (!String.IsNullOrEmpty(loanPaymentError))
            {
                <b>@loanPaymentError</b>
            }

            @if (!playerDontPayLoan && !playerDontPayLoadConfirmation)
            {
                <button class="btn btn-primary" @onclick=@DontPayLoan>I don't want to pay my loan</button>
            }
            else if (playerDontPayLoan)
            {
                <b>If you don't pay your loan, you will be penalized. This can not be undone</b>
                <button class="btn btn-primary" @onclick=@DontPayLoanConfirmation>I REALLY don't want to pay my loan</button>
            }
            else if (playerDontPayLoadConfirmation && !playerDontPayLoan)
            {
                <button class="btn btn-primary" @onclick="StartNewYear">Start a new year</button> <p>
                    Who needs to press 'Start a new year!!!':
                    @foreach (player player in playerList)
                    {
                        @if (player.StartNewYear == false && player.Ready != false)
                        {
                            <b> || @player.Name || </b>
                        }
                    }
                </p>
            }
        }
        else if (playerDontPayLoadConfirmation || playerLoan.PaidThisYear)
        {
            <button class="btn btn-primary" @onclick="StartNewYear">Start a new year</button> <p>
                Who needs to press 'Start a new year!!!':
                @foreach (player player in playerList)
                {
                    @if (player.StartNewYear == false && player.Ready != false)
                    {
                        <b> || @player.Name || </b>
                    }
                }
            </p>
        }
        else if (playerLoan.PaidThisYear)
        {
            <button class="btn btn-primary" @onclick="StartNewYear">Start a new year</button> <p>
                Who needs to press 'Start a new year!!!':
                @foreach (player player in playerList)
                {
                    @if (player.StartNewYear == false && player.Ready != false)
                    {
                        <b> || @player.Name || </b>
                    }
                }
            </p>
        }
    }
    else if (currentPlayer.HasLoan && playerLoan.YearsRemaining < 11 && playerLoan.PaidThisYear)
    {
        <button class="btn btn-primary" @onclick="StartNewYear">Start a new year</button> <p>
            Who needs to press 'Start a new year!!!':
            @foreach (player player in playerList)
            {
                @if (player.StartNewYear == false && player.Ready != false)
                {
                    <b> || @player.Name || </b>
                }
            }
        </p>
    }



</div>
    }

    <p>Special events!!!</p>
    @thisYear.Description
    if (year > 0)
    {
        <b> @thisYear.StalkName </b> <i> changed </i> <b> @thisYear.PriceChange</b>
    }
    else
    {
        <p><i>Good luck!</i></p>
    }

    @if (stalksBankrupt.Count > 0)
    {
        foreach (string stalk in stalksBankrupt)
        {
            <p><b>@stalk</b><i> went bankrupt!!!</i></p>
        }
        <audio autoplay><source src="/glass-shattering.mp3" /></audio>
        <audio autoplay><source src="/wilhelm-scream.mp3" /></audio>
    }
    <table class="table">
        <thead>
            <tr>
                <th>Year</th>
                <th>Bear or Bull?</th>

            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@year</td>
                <td>@bullBear</td>
            </tr>
        </tbody>
    </table>
    <table class="table">
        <thead>
            <tr>
                <th>Stalk Name</th>
                <th>Price Per Share</th>
                <th>Dividend Per Share (bull)</th>
                <th>Dividend Per Share (bear)</th>
                <th>Yearly Change</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var stalk in stalkList)
            {
                <tr>
                    <td>@stalk.Name</td>
                    <td>@stalk.PricePerShare</td>
                    <td>@stalk.BullDividend</td>
                    <td>@stalk.BearDividend</td>
                    <td>
                        @stalk.YearlyChange
                        @if (stalk.Split)
                        {
                            <b> Split!!!</b>
                        }
                    </td>
                </tr>
            }

        </tbody>
    </table>
    if (!endGame && year > 0)
    {
        <p>Make a purchase?</p>
        <EditForm Model=@playerBuy OnSubmit=@BuyStalks>
            <InputSelect @bind-Value="playerBuy.BuyOrSell">
                <option value="Buy">BUY BUY BUY</option>
                <option value="Sell">SELL SELL SELL</option>
            </InputSelect>
            <InputSelect @bind-Value="playerBuy.StalkName">
                @foreach (var stalk in stalkList)
                        {
                    <option value="@stalk.Name">@stalk.Name</option>}
            </InputSelect>
            <InputNumber @bind-Value="playerBuy.TotalStalks">0</InputNumber>
            <input type="submit" value="Submit" class="btn btn-primary" />
        </EditForm>
    }
    <h3>@username  's Stats</h3>
    <table class="table">
        <thead>
            <tr>
                <th>CashOnHand</th>
                <th>NetWorth</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>$@currentPlayer.CashOnHand</td>
                <td>$@currentPlayer.NetWorth</td>
            </tr>
        </tbody>
    </table>
    <p>stalks owned by @username</p>
    <table class="table">
        <thead>
            <tr>
                <th>Stalk Name</th>
                <th>Number of Stalks</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var owned in stalksOwned)
            {
                @if (owned.TotalStalks > 0)
                {
                    <tr>

                        <td>@owned.StalkName</td>
                        <td>@owned.TotalStalks</td>

                    </tr>
                }
            }

        </tbody>
    </table>
    <table style="width:100%" border="0">
        <tr>
            @if ((!doYouWantToKnowAboutLoans) && year > 1 && (!playerWantsToTakeOutALoan) && !currentPlayer.HasLoan)
            {
                <td style="width:100%;text-align:left"><button class="btn btn-primary" @onclick=@LearnAboutLoans>Would you like to learn about our loans?</button></td>
            }
            else if (doYouWantToKnowAboutLoans && !currentPlayer.HasLoan)
            {
                <td>You can take out a loan up 25% of your net worth. The minimum loan is $100. Terms are 10 years and 6% interest. If you take out a loan this year, your first payment is NEXT year. Penalties for missed payments: 1st missed payment - 10% added to loan balance. 2nd - 15% added. 3rd - All assets siezed and you are bankrupt</td>
                <td><b>The max loan you can take out is: <u>@MaxLoanAmount</u></b></td>
                <td><b>The minimum payment for the loan would be: <u>@MinLoanPayment</u></b></td>
                <td><button class="btn btn-primary" @onclick=@PlayerWantsLoan>take out a loan?</button></td>

            }
            else if (playerWantsToTakeOutALoan && !currentPlayer.HasLoan)
            {
                <td><b>The max loan you can take out is: <u>@MaxLoanAmount</u></b></td>
                <td>
                    <EditForm Model=@loanPurchaseOrPayment OnSubmit=@PurchaseLoan>
                        <InputText type="hidden" @bind-Value="loanPurchaseOrPayment.PurchaseOrPayment">Purchase</InputText>
                        <InputNumber @bind-Value="loanPurchaseOrPayment.DollarAmount">0</InputNumber>
                        <input type="submit" value="Submit" class="btn btn-primary" />
                    </EditForm>
                </td>
                @if (!String.IsNullOrEmpty(purchaseError))
                {
                    <td>@purchaseError</td>
                }
            }

        </tr>

    </table>


    <p>Scoreboard baby!</p>
    <table class="table">
        <thead>
            <tr>
                <th>Player Name</th>
                <th>Networth</th>
            </tr>
        </thead>
        <tbody>

            @foreach (player player in playerList)
            {
                if (player.Ready != false)
                {
                    <tr>
                        <td>@player.Name</td>
                        <td>$@player.NetWorth</td>
                    </tr>
                }
            }

        </tbody>
    </table>
    if (endGame && allLoans.Count > 0)
    {
        <p>Outstanding loans</p>
        <table class="table">
            <thead>
                <tr>
                    <th>Player Name</th>
                    <th>Remaining Balance</th>
                </tr>
            </thead>
            <tbody>

                @foreach (Loan loan in allLoans)
                {
                    if (loan.LoanBalance > 0)
                    {
                        <tr>
                            <td>@loan.PlayerName</td>
                            <td>$@loan.LoanBalance</td>
                        </tr>
                    }
                }

            </tbody>
        </table>

    }


    if (!endGame)
    {
        <div>
            <button class="btn btn-primary" @onclick="EndGame">End it all now?</button> When the game 'ends', one more year is played and then the winner is declared.
            Who wants to end it all???:
            <p>
                @foreach (player player in playerList)
                {
                    @if (player.EndGame == true)
                    {
                        <b> || @player.Name || </b>
                    }
                }
            </p>
        </div>
    }

}

Sounds from Zapsplat.com

@code {
    public bool hidden = true;

    private HubConnection hubConnection;

    public int year = 0;
    public string bullBear = "It begins...";

    public bool gameStarted = false;

    public List<stalk> stalkList = new List<stalk>();

    public string stalksListToJson;

    public player currentPlayer = new player("", "", 10000, 0, false, false, false, false);
    public string username = "";
    public List<player> playerList = new List<player>();
    public bool allPlayersReady = false;


    public List<StalksOwned> stalksOwned = new List<StalksOwned>();
    public List<StalksOwned> allStalksOwned = new List<StalksOwned>();


    PlayerBuy playerBuy = new PlayerBuy("", 0, 0, "");
    LoanPurchaseOrPayment loanPurchaseOrPayment = new LoanPurchaseOrPayment(null, null, null, 0);

    public string playerConnectionId;
    public bool gotConnectionId = false;
    public bool gotUserName = false;
    public int playerCashOnHand = 1;
    public int playerNetWorth = 1;
    public bool startNewYear = false;
    public bool endGame = false;
    public string winner = "";
    player winningPlayer = new player("It'sa me-a Mario", "", 10000, 0, false, false, false, false);

    YearEvent thisYear = new YearEvent("", "", "Welcome to StalksStalksStalks! You have been tasked with making MegaCorp as much money as possible! Don't worry, other people are competing with you as well! The investor with the highest networth wins! Everyone else is fired! Start the new year to begin the game!", 0);

    public bool CanIGetAYeehaw = false;
    public string requestingYeehaw = "";
    public string givingYeehaw = "";
    public bool YeehawReceived = false;
    public List<string> stalksBankrupt = new List<string>();
    public bool doYouWantToKnowAboutLoans = false;
    public bool playerWantsToTakeOutALoan = false;
    public int loanAmount = 0;
    public Loan playerLoan = new Loan(null, null, 0, 0, 0, false, 0);
    public List<Loan> allLoans = new List<Loan>();
    public int MaxLoanAmount;
    public int MinLoanPayment;
    public string purchaseError = null;
    public string loanPaymentError = null;

    public bool playerDontPayLoan = false;
    public bool playerDontPayLoadConfirmation = false;

    protected override async Task OnInitializedAsync()
    {
        hubConnection = new HubConnectionBuilder()
            .WithUrl(navigationManager.ToAbsoluteUri("/Game"))
            .Build();

        hubConnection.On<string>("Returned users", (usersToJson) =>
        {
            playerList = JsonConvert.DeserializeAnonymousType(usersToJson, playerList);
            StateHasChanged();
        });

        hubConnection.On<string, bool, string>("Readied User", (playerListToJson, arePlayersReady, currentPlayerInfo) =>
        {
            playerList = JsonConvert.DeserializeAnonymousType(playerListToJson, playerList);
            allPlayersReady = arePlayersReady;

        /*
        if (!gotConnectionId && username != "")
        {
            currentPlayer = JsonConvert.DeserializeAnonymousType(currentPlayerInfo, currentPlayer);
            playerConnectionId = currentPlayer.ConnectionId;
            gotConnectionId = true;
        }*/

            StateHasChanged();
        });

        hubConnection.On<string, string>("Player Name Added", (playerListToJson, currentPlayerToJson) =>
        {
            playerList = JsonConvert.DeserializeAnonymousType(playerListToJson, playerList);
            currentPlayer = JsonConvert.DeserializeAnonymousType(currentPlayerToJson, currentPlayer);
            gotConnectionId = true;
            playerConnectionId = currentPlayer.ConnectionId;
            StateHasChanged();
        });

        hubConnection.On<bool, string, int, string, string, string>("Start Game", (isGameStarted, stalksListToJson, newYear, currentPlayerInfo, playerListToJson, StalksOwnedToJson) =>
        {
            gameStarted = isGameStarted;
            year = newYear;
            stalkList = JsonConvert.DeserializeAnonymousType(stalksListToJson, stalkList);
            currentPlayer = JsonConvert.DeserializeAnonymousType(currentPlayerInfo, currentPlayer);
            if (!gotUserName && currentPlayer.ConnectionId == playerConnectionId)
            {
                username = currentPlayer.Name;
                gotUserName = true;
            }

            playerList = JsonConvert.DeserializeAnonymousType(playerListToJson, playerList);
            currentPlayer = playerList.First(x => x.ConnectionId == playerConnectionId);

            StateHasChanged();

        });

        hubConnection.On<int, string, string, string, string, string, string, string>("New Year", (newYear, newBearBull, stalksListToJson, StalksOwnedToJson, playerListToJson, thisYearEventToJson, stalksBankruptToJson, loanListToJson) =>
        {
            bool hasYearIncreased = false;
            if (year < newYear)
            {
                hasYearIncreased = true;
            }
            year = newYear;
            bullBear = newBearBull;
            stalkList = JsonConvert.DeserializeAnonymousType(stalksListToJson, stalkList);

            playerList = JsonConvert.DeserializeAnonymousType(playerListToJson, playerList);
            currentPlayer = playerList.First(x => x.ConnectionId == playerConnectionId);

            allStalksOwned = JsonConvert.DeserializeAnonymousType(StalksOwnedToJson, allStalksOwned);
            stalksOwned = allStalksOwned.Where(x => x.PlayerName == playerConnectionId).ToList();

            YearEvent checkIfEventExists = new YearEvent("", "", "", 0);

            checkIfEventExists = JsonConvert.DeserializeAnonymousType(thisYearEventToJson, checkIfEventExists);

            if (checkIfEventExists.StalkName != "")
            {
                thisYear = checkIfEventExists;
            }

            stalksBankrupt = JsonConvert.DeserializeAnonymousType(stalksBankruptToJson, stalksBankrupt);

            allLoans = JsonConvert.DeserializeAnonymousType(loanListToJson, allLoans);
            if (allLoans.Any(x => x.ConnectionId == playerConnectionId))
            {

                playerLoan = allLoans.First(x => x.ConnectionId == playerConnectionId);
                if (hasYearIncreased)
                {
                    playerLoan.PaidThisYear = false;
                    playerDontPayLoan = false;
                    playerDontPayLoadConfirmation = false;
                }

            }

            if (endGame)
            {
                playerList.RemoveAll(x => x.Ready == false);
                winningPlayer = playerList.OrderByDescending(x => x.NetWorth).First();
            }

            StateHasChanged();
        });

        hubConnection.On<string, string>("Bought Stalks", (playerListToJson, StalksOwnedToJson) =>
        {
            playerList = JsonConvert.DeserializeAnonymousType(playerListToJson, playerList);
            currentPlayer = playerList.First(x => x.ConnectionId == playerConnectionId);

            allStalksOwned = JsonConvert.DeserializeAnonymousType(StalksOwnedToJson, allStalksOwned);
            stalksOwned = allStalksOwned.Where(x => x.PlayerName == playerConnectionId).ToList();

            StateHasChanged();
        });

        hubConnection.On<string, bool>("Player Wants To Quit", (playerListToJson, EndTheGame) =>
        {
            playerList = JsonConvert.DeserializeAnonymousType(playerListToJson, playerList);
            currentPlayer = playerList.First(x => x.ConnectionId == playerConnectionId);

            endGame = EndTheGame;
            StateHasChanged();
            if (EndTheGame)
            {
                NewYear();
            }

        });

        hubConnection.On<string>("Yeehaw Requested", (requestedName) =>
        {
            CanIGetAYeehaw = true;
            YeehawReceived = false;
            requestingYeehaw = requestedName;
            StateHasChanged();

        });

        hubConnection.On<string>("Yeehaw Sent", (sentName) =>
        {
            CanIGetAYeehaw = false;
            givingYeehaw = sentName;

            if (givingYeehaw != requestingYeehaw)
            {
                YeehawReceived = true;
            }
            StateHasChanged();

        });
        hubConnection.On<int, int>("Loan Terms Sent", (MaxLoanAmountFromServer, MinPaymentFromServer) =>
        {
            MaxLoanAmount = MaxLoanAmountFromServer;
            MinLoanPayment = MinPaymentFromServer;
            StateHasChanged();

        });
        hubConnection.On<string, string, string>("Loan Purchased", (purchaseErrorFromServer, playerListToJson, loanListToJson) =>
        {

            purchaseError = purchaseErrorFromServer;
            if (String.IsNullOrEmpty(purchaseError))
            {
                doYouWantToKnowAboutLoans = false;
                playerWantsToTakeOutALoan = false;
            }

            playerList = JsonConvert.DeserializeAnonymousType(playerListToJson, playerList);
            currentPlayer = playerList.First(x => x.ConnectionId == playerConnectionId);

            allLoans = JsonConvert.DeserializeAnonymousType(loanListToJson, allLoans);
            playerLoan = allLoans.First(x => x.ConnectionId == playerConnectionId);

            StateHasChanged();
        });
        hubConnection.On<string>("Didn't Pay Loan", (loanListToJson) =>
        {
            allLoans = JsonConvert.DeserializeAnonymousType(loanListToJson, allLoans);
            playerLoan = allLoans.First(x => x.ConnectionId == playerConnectionId);

            StateHasChanged();
        });
        hubConnection.On<string, string, string>("Loan Paid", (paymentErrorFromServer, loanListToJson, playerListToJson) =>
        {
            loanPaymentError = paymentErrorFromServer;

            playerList = JsonConvert.DeserializeAnonymousType(playerListToJson, playerList);
            currentPlayer = playerList.First(x => x.ConnectionId == playerConnectionId);
            allLoans = JsonConvert.DeserializeAnonymousType(loanListToJson, allLoans);
            playerLoan = allLoans.First(x => x.ConnectionId == playerConnectionId);

            StateHasChanged();
        });


        await hubConnection.StartAsync();
    }

    public void StartNewYear()
    {
        //stalksListToJson = JsonConvert.SerializeObject(stalkList);
        NewYear();
    }
    public void LearnAboutLoans()
    {
        doYouWantToKnowAboutLoans = true;
        GetLoanTerms();
    }
    public void PlayerWantsLoan()
    {
        doYouWantToKnowAboutLoans = false;
        playerWantsToTakeOutALoan = true;
    }
    public void DontPayLoan()
    {
        playerDontPayLoan = true;
    }
    public void DontPayLoanConfirmation()
    {
        //playerDontPayLoan = false;
        playerDontPayLoadConfirmation = true;
        playerLoan.PaidThisYear = false;
        PlayerDidntPayLoan();
    }


    Task Send() =>
        hubConnection.SendAsync("InitializeGame", gameStarted, username);
    Task NewYear() =>
        hubConnection.SendAsync("GetNewYear", bullBear);
    Task BuyStalks() =>
        hubConnection.SendAsync("BuyStalks", JsonConvert.SerializeObject(playerBuy));
    Task GetUsers() =>
        hubConnection.SendAsync("GetUsers");
    Task ReadyUp() =>
        hubConnection.SendAsync("ReadyUp", username);
    Task EndGame() =>
        hubConnection.SendAsync("Endgame");
    Task RequestYeehaw() =>
        hubConnection.SendAsync("RequestYeehaw");
    Task GiveYeehaw() =>
        hubConnection.SendAsync("GiveYeehaw");
    Task CreatePlayerName() =>
        hubConnection.SendAsync("CreatePlayerName", username);
    Task GetLoanTerms() =>
        hubConnection.SendAsync("GetLoanTerms");
    Task PurchaseLoan() =>
        hubConnection.SendAsync("PurchaseLoan", JsonConvert.SerializeObject(loanPurchaseOrPayment));
    Task PlayerDidntPayLoan() =>
        hubConnection.SendAsync("PlayerDidntPayLoan", JsonConvert.SerializeObject(playerLoan));
    Task PayLoan() =>
        hubConnection.SendAsync("PayLoan", JsonConvert.SerializeObject(loanPurchaseOrPayment));

    public bool IsConnected =>
hubConnection.State == HubConnectionState.Connected;

    public void Dispose()
    {
        _ = hubConnection.DisposeAsync();
    }
}
